Python传统的执行方式：
    源代码（.py结尾的文件）-->字节码（.pyc）-->在Python虚拟机运行
    相关解释：
        Python的传统运行执行模式，录入的源代码转换为字节码，之后字节码在Python虚拟机中运行，代码自动被编译，之后在解释。
        PVM（Python虚拟机）循环仍然需要解释字节码，并且字节码指令与CPU指令相比需要更多的工作。另一方面，和其他景点的解释器不同，这里仍有内部的编译步骤：
        Python并不需要反复地重分析和重分解每一行语句。实际的效果就是纯Python代码的运行速度介于传统的编译语言和传统的解释语言之间。
    开发的含义：
        Python执行模块的另一个情况是其开发和执行的环境实际上并没有区别。也就是说，编译和执行源代码的系统是同一个系统。这种相似性对于拥有传统编译语言背景
        的读者来说，更有意义，然而在Python中，编译器总是在运行时出现，并且是运行程序系统的一部分。
        这使开发周期大大缩短。在程序开始执行之前不需要预编译和连接，只需要简单的输入并运行代码即可。这同样使Python具有更多的动态语言特性：在运行时，
        Python程序去构建并执行另一个Python程序是有可能的，而且往往是非常方便的。例如，eval和exec内置模块，能够接受并运行包含Python程序代码的字符串。
        这种结构是Python能够实现产品定制的原因：因为Python代码可以动态的修改，用户可以改进系统内部的Python部分，而不需要拥有或编译整个系统的代码。
        从更基础的角度来说，牢记我们在Python中真正拥有的只有在运行时，完全不需要初始的编译阶段，所有的事情都是在程序运行时发生的。这甚至还包括了建立函数
        和类的操作以及连接的模块。这些事情对于静态语言往往是发生在执行之前的，而在Python中是与程序的执行同事进行的。就像我们看到的那样，实际的效果就是
        Python比一些读者所用的程序语言带来了更加动态的编译体验。
执行模块的变体：
    在继续学习之前，应该指出前一节说介绍的内部执行流程反映了如今Python的标准实现形式，并且这实际上并不是Python语言本身所必需的。正式因为这一点，执行模块
    也在随时间而演变，事实上，丛某种意义上来讲有些系统已经改进了传统的执行方式所描述的情况。
